options {
  JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(MiniJavaParser)
package myparser;

  import syntaxtree.*;
  public class MiniJavaParser {}
PARSER_END(MiniJavaParser)

SKIP : /* WHITE SPACE */
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

SPECIAL_TOKEN : /* COMMENTS */
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LSQPAREN: "[" >
| < RSQPAREN: "]" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
| < ASSIGN: "=" >
| < LT: "<" >
| < PLUS: "+" >
| < MINUS: "-" >
| < TIME: "*" >
| < DIVIDE: "/" >
| < EXPONENT: "^^" >
| < AND : "&&" >
| < OR : "||" >
| < NOT : "!" >
| < BOOLEAN: "boolean" >
| < CLASS: "class" >
| < FOR: "for" >
| < INTERFACE: "interface" >
| < ELSE: "else" >
| < EXTENDS: "extends" >
| < FALSE: "false" >
| < IF: "if" >
| < WHILE: "while" >
| < INTEGER: "int" >
| < LENGTH: "length" >
| < MAIN: "main" >
| < NEW: "new" >
| < PUBLIC: "public" >
| < RETURN: "return" >
| < STATIC: "static" >
| < STRING: "String" >
| < THIS: "this" >
| < TRUE: "true" >
| < PRINT: "System.out.println" >
| < VOID: "void" >
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL: (<DECIMAL_INTEGER> | <OCTAL_INTEGER> | <HEXADECIMAL_INTEGER>)>
| < #DECIMAL_INTEGER: ["1"-"9"] (["0"-"9"])* | "0">
| < #OCTAL_INTEGER: "0" (["0"-"7"])+>
| < #HEXADECIMAL_INTEGER: ("0x" | "0X") (["0"-"9", "A"-"F", "a"-"f"])+>
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}


/************************************
 * The MiniJava Grammar Starts Here *
 ************************************/


Program Goal() :
{ MainClass m;
  ClassDeclList cl = new ClassDeclList();
  ClassDecl c;
}
{
  m=MainClass()
  ( c=ClassDeclaration() { cl.addElement(c); } )*
  <EOF>
  { return new Program(m,cl); }
}

MainClass MainClass() :
{ Identifier i1,i2;
  Statement s; }
{
  "class" i1=Identifier() "{"
    "public" "static" "void" "main" "(" "String" "[" "]" i2=Identifier() ")"
    "{" s=Statement() "}"
  "}"
  { return new MainClass(i1,i2,s); }
}

ClassDecl ClassDeclaration() :
{ ClassDecl c; }
{
  (
  LOOKAHEAD(3)
  c=ClassDeclarationSimple()
|
  c=ClassDeclarationExtends()
  )
  { return c; }
}

ClassDecl ClassDeclarationSimple() :
{ Identifier i;
  VarDecl v;
  VarDeclList vl = new VarDeclList();
  MethodDecl m;
  MethodDeclList ml = new MethodDeclList();
}
{
  "class" i=Identifier() "{" ( v=VarDeclaration()    { vl.addElement(v); } )*
                             ( m=MethodDeclaration() { ml.addElement(m); } )*
                       "}"
  { return new ClassDeclSimple(i,vl,ml); }
}

ClassDecl ClassDeclarationExtends() :
{ Identifier i1,i2;
  VarDecl v;
  VarDeclList vl = new VarDeclList();
  MethodDecl m;
  MethodDeclList ml = new MethodDeclList();
}
{
  "class" i1=Identifier() "extends" i2=Identifier()
                       "{"   ( v=VarDeclaration()    { vl.addElement(v); } )*
                             ( m=MethodDeclaration() { ml.addElement(m); } )*
                       "}"
  { return new ClassDeclExtends(i1,i2,vl,ml); }
}

VarDecl VarDeclaration() :
{ Type t;
  Identifier i;
}
{
  t=Type() i=Identifier() ";"
  { return new VarDecl(t,i); }
}

MethodDecl MethodDeclaration() :
{
  Type t;
  Identifier i;
  FormalList fl = new FormalList();
  VarDecl v;
  VarDeclList vl = new VarDeclList();
  Statement s;
  StatementList sl = new StatementList();
  Exp e;
}
{
  "public" t=Type() i=Identifier()
  "(" fl=FormalParameterList() ")"
  "{" ( LOOKAHEAD(2) v=VarDeclaration() { vl.addElement(v); } )*
      ( s=Statement() { sl.addElement(s); } )* "return" e=Expression() ";" "}"
  { return new MethodDecl(t,i,fl,vl,sl,e); }
}

JAVACODE
FormalList FormalParameterList() {
  Token tok, last = new Token();
  FormalList f = new FormalList();
  int state = 0;  /* -1: skip all, 0: init, 1: comma, 2: non-empty list, 3: have type, 4: int, 5: int [ */
  Type t = new IdentifierType("Dummy");
  boolean missing_comma = false;
  while (true) {
    tok = getToken(1);
    if (state == -1) {  /* skip all */
      if (tok.kind == RPAREN || tok.kind == EOF) break;
    } else if (state == 0) {  /* init */
      if (tok.kind == RPAREN) break;
      if (tok.kind == IDENTIFIER) {
        t = new IdentifierType(tok.image);
        last = tok;
        state = 3;
      } else if (tok.kind == INTEGER) {
        last = tok;
        state = 4;
      }
      else if (tok.kind == BOOLEAN) {
        t = new BooleanType();
        last = tok;
        state = 3;
      } else {
        last = tok;
        System.out.println("invalid formal parameter list at line " + last.beginLine + ", column " + last.beginColumn);
        state = -1;
      }
    } else if (state == 1) {  /* comma */
      if (tok.kind == RPAREN) {
        System.out.println("invalid formal parameter list at line " + last.beginLine + ", column " + last.beginColumn);
        break;
      }
      if (tok.kind == IDENTIFIER) {
        t = new IdentifierType(tok.image);
        state = 3;
      } else if (tok.kind == INTEGER) state = 4;
      else if (tok.kind == BOOLEAN) {
        t = new BooleanType();
        state = 3;
      } else {
        System.out.println("invalid formal parameter list at line " + last.beginLine + ", column " + last.beginColumn);
        state = -1;
      }
    } else if (state == 2) {  /* non-empty list */
      if (tok.kind == RPAREN) break;
      if (tok.kind == COMMA) {
        last = tok;
        state = 1;
      } else if (tok.kind == IDENTIFIER) {
        t = new IdentifierType(tok.image);
        last = tok;
        missing_comma = true;
        state = 3;
      } else if (tok.kind == INTEGER) {
        last = tok;
        missing_comma = true;
        state = 4;
      } else if (tok.kind == BOOLEAN) {
        t = new BooleanType();
        last = tok;
        missing_comma = true;
        state = 3;
      } else {
        last = tok;
        System.out.println("invalid formal parameter list at line " + last.beginLine + ", column " + last.beginColumn);
        state = -1;
      }
    } else if (state == 3) {  /* have type */
      if (tok.kind == RPAREN) {
        if (missing_comma) {
          System.out.println(", expected at line " + last.beginLine + ", column " + last.beginColumn);
          missing_comma = false;
        }
        f.addElement(new Formal(t, new Identifier("dummy")));
        last = tok;
        System.out.println("identifier expected at line " + last.beginLine + ", column " + last.beginColumn);
        break;
      }
      if (tok.kind == COMMA) {
        if (missing_comma) {
          System.out.println(", expected at line " + last.beginLine + ", column " + last.beginColumn);
          missing_comma = false;
        }
        f.addElement(new Formal(t, new Identifier("dummy")));
        last = tok;
        System.out.println("identifier expected at line " + last.beginLine + ", column " + last.beginColumn);
        state = 1;
      } else if (tok.kind == IDENTIFIER) {
        if (missing_comma) {
          System.out.println(", expected at line " + last.beginLine + ", column " + last.beginColumn);
          missing_comma = false;
        }
        f.addElement(new Formal(t, new Identifier(tok.image)));
        state = 2;
      } else if (tok.kind == INTEGER) {
        if (missing_comma) {
          System.out.println(", expected at line " + last.beginLine + ", column " + last.beginColumn);
          missing_comma = false;
        }
        f.addElement(new Formal(t, new Identifier("dummy")));
        last = tok;
        System.out.println("identifier expected at line " + last.beginLine + ", column " + last.beginColumn);
        missing_comma = true;
        state = 4;
      } else if (tok.kind == BOOLEAN) {
        if (missing_comma) {
          System.out.println(", expected at line " + last.beginLine + ", column " + last.beginColumn);
          missing_comma = false;
        }
        f.addElement(new Formal(t, new Identifier("dummy")));
        t = new BooleanType();
        last = tok;
        System.out.println("identifier expected at line " + last.beginLine + ", column " + last.beginColumn);
        missing_comma = true;
        state = 3;
      } else {
        System.out.println("invalid formal parameter list at line " + last.beginLine + ", column " + last.beginColumn);
        state = -1;
      }
    } else if (state == 4) {  /* int */
      if (tok.kind == RPAREN) {
        if (missing_comma) {
          System.out.println(", expected at line " + last.beginLine + ", column " + last.beginColumn);
          missing_comma = false;
        }
        f.addElement(new Formal(new IntegerType(), new Identifier("dummy")));
        last = tok;
        System.out.println("identifier expected at line " + last.beginLine + ", column " + last.beginColumn);
        break;
      }
      if (tok.kind == COMMA) {
        if (missing_comma) {
          System.out.println(", expected at line " + last.beginLine + ", column " + last.beginColumn);
          missing_comma = false;
        }
        f.addElement(new Formal(new IntegerType(), new Identifier("dummy")));
        last = tok;
        System.out.println("identifier expected at line " + last.beginLine + ", column " + last.beginColumn);
        state = 1;
      } else if (tok.kind == IDENTIFIER) {
        if (missing_comma) {
          System.out.println(", expected at line " + last.beginLine + ", column " + last.beginColumn);
          missing_comma = false;
        }
        f.addElement(new Formal(new IntegerType(), new Identifier(tok.image)));
        state = 2;
      } else if (tok.kind == INTEGER) {
        if (missing_comma) {
          System.out.println(", expected at line " + last.beginLine + ", column " + last.beginColumn);
          missing_comma = false;
        }
        f.addElement(new Formal(new IntegerType(), new Identifier("dummy")));
        last = tok;
        System.out.println("identifier expected at line " + last.beginLine + ", column " + last.beginColumn);
        missing_comma = true;
        state = 4;
      } else if (tok.kind == BOOLEAN) {
        if (missing_comma) {
          System.out.println(", expected at line " + last.beginLine + ", column " + last.beginColumn);
          missing_comma = false;
        }
        f.addElement(new Formal(new IntegerType(), new Identifier("dummy")));
        t = new BooleanType();
        last = tok;
        System.out.println("identifier expected at line " + last.beginLine + ", column " + last.beginColumn);
        missing_comma = true;
        state = 3;
      } else if (tok.kind == LSQPAREN) state = 5;
      else {
        System.out.println("invalid formal parameter list at line " + last.beginLine + ", column " + last.beginColumn);
        state = -1;
      }
    } else if (state == 5) {  /* int[ */
      if (tok.kind == RPAREN) {
        System.out.println("invalid formal parameter list at line " + last.beginLine + ", column " + last.beginColumn);
        break;
      } else if (tok.kind == RSQPAREN) {
        t = new IntArrayType();
        state = 3;
      } else {
        System.out.println("invalid formal parameter list at line " + last.beginLine + ", column " + last.beginColumn);
        state = -1;
      }
    }
    tok = getNextToken();
  }
  return f;
}

Type Type() :
{ Type t; }
{
  (
  LOOKAHEAD(3)
  t=ArrayType()
|
  t=BooleanType()
|
  t=IntegerType()
|
  t=IdentifierType()
  )
  { return t; }
}

Type ArrayType() :
{}
{
  "int" "[" "]"
  { return new IntArrayType(); }
}

Type BooleanType() :
{}
{
  "boolean"
  { return new BooleanType(); }
}

Type IntegerType() :
{}
{
  "int"
  { return new IntegerType(); }
}

Type IdentifierType() :
{ Token t; }
{
  t=<IDENTIFIER>
  { return new IdentifierType(t.image); }
}

Statement Statement() :
{ Statement s; }
{
  (
  s=Block()
|
  LOOKAHEAD(2)
  s=AssignmentStatement()
|
  LOOKAHEAD(2)
  s=ArrayAssignmentStatement()
|
  s=IfStatement()
|
  s=WhileStatement()
|
  s=ForStatement()
|
  s=PrintStatement()
  )
  { return s; }
}

Statement Block() :
{
  Statement s;
  StatementList sl = new StatementList();
}
{
  "{" ( s=Statement() { sl.addElement(s); } )* "}"
  { return new Block(sl); }
}

Statement AssignmentStatement() :
{ Identifier i;
  Exp e;
}
{
  i=Identifier() "=" e=Expression() ";"
  { return new Assign(i,e); }
}

Statement ArrayAssignmentStatement() :
{ Identifier i;
  Exp e1,e2;
}
{
  i=Identifier() "[" e1=Expression() "]" "=" e2=Expression() ";"
  { return new ArrayAssign(i,e1,e2); }
}

Statement IfStatement() :
{ Exp e;
  Statement s1,s2;
}
{
  "if" "(" e=Expression() ")" s1=Statement() "else" s2=Statement()
  { return new If(e,s1,s2); }
}

Statement WhileStatement() :
{ Exp e;
  Statement s;
}
{
  "while" "(" e=Expression() ")" s=Statement()
  { return new While(e,s); }
}

Statement ForStatement() :
{ ForInit f;
  Exp e;
  StmtExprList se;
  Statement s;
}
{
  "for" "("
  (
  LOOKAHEAD(2)
  f=LocalVariableDeclaration()
|
  se=StmtExprList()
  { f = new StmtExprInit(se); }
  )
  ";" e=Expression() ";" se=StmtExprList() ")" s=Statement()
  { return new For(f,e,se,s); }
}

LocalVar LocalVariableDeclaration() :
{ Type t;
  Identifier i;
  Exp e;
  LocalVarDeclList v = new LocalVarDeclList();;
}
{
  t=Type() i=Identifier() "=" e=Expression()
  { v.addElement(new LocalVarDecl(i,e)); }
  (
  "," i=Identifier() "=" e=Expression()
  { v.addElement(new LocalVarDecl(i,e)); }
  )*
  { return new LocalVar(t, v); }
}

StmtExprList StmtExprList() :
{ StmtExprList se = new StmtExprList();
  Identifier i;
  Exp e1, e2;
}
{
  i=Identifier()
  (
  "=" e2=Expression()
  { se.addElement(new SimpleStmtExpr(i, e2)); }
|
  "[" e1=Expression() "]" "=" e2=Expression()
  { se.addElement(new ArrayStmtExpr(i, e1, e2)); }
  )
  (
  "," i=Identifier()
  (
  "=" e2=Expression()
  { se.addElement(new SimpleStmtExpr(i, e2)); }
|
  "[" e1=Expression() "]" "=" e2=Expression()
  { se.addElement(new ArrayStmtExpr(i, e1, e2)); }
  )
  )*
  { return se; }
}

Statement PrintStatement() :
{ Exp e; }
{
  "System.out.println" "(" e=Expression() ")" ";"
  { return new Print(e); }
}

Exp Expression() :
{ Exp e1, e2; }
{
  e1=ExpressionG()
  (
  "||" e2=ExpressionG()
  { e1 = new Or(e1,e2); }
  )*
  { return e1; }
}

Exp ExpressionG() :
{ Exp e1, e2; }
{
  e1=ExpressionF()
  (
  "&&" e2=ExpressionF()
  { e1 = new And(e1,e2); }
  )*
  { return e1; }
}

Exp ExpressionF() :
{ Exp e1, e2; }
{
  e1=ExpressionE()
  (
  "<" e2=ExpressionE()
  { e1 = new LessThan(e1,e2); }
  )*
  { return e1; }
}


Exp ExpressionE() :
{ Exp e1, e2; }
{
  e1=ExpressionD()
  (
  "+" e2=ExpressionD()
  { e1 = new Plus(e1,e2); }
|
  "-" e2=ExpressionD()
  { e1 = new Minus(e1,e2); }
  )*
  { return e1; }
}

Exp ExpressionD() :
{ Exp e1, e2; }
{
  e1=ExpressionC()
  (
  "*" e2=ExpressionC()
  { e1 = new Times(e1,e2); }
|
  "/" e2=ExpressionC()
  { e1 = new Divide(e1,e2); }
  )*
  { return e1; }
}

Exp ExpressionC() :
{ Exp e1, e3; Exponent e2, e4; }
{
  e1=ExpressionB()
  (
  "^^" e3=ExpressionB()
  { e2 = new Exponent(e1,e3); e1 = e2; }
  (
  "^^" e3=ExpressionB()
  { e4 = new Exponent(e2.e2,e3); e2.e2 = e4; e2 = e4; }
  )*
  )?
  { return e1; }
}
Exp ExpressionB() :
{ Exp e; }
{
  (
  "-" e=ExpressionB()
  { e = new UnaryMinus(e); }
|
  "!" e=ExpressionB()
  { e = new Not(e); }
|
  e=ExpressionA()
  )
  { return e; }
}


Exp ExpressionA() :
{ Exp e1, e2;
  Identifier i;
  ExpList e3; }
{
  e1=PrimaryExpression()
  (
  "[" e2=Expression() "]"
  { e1 = new ArrayLookup(e1,e2);}
|
  LOOKAHEAD(2)
  "." "length"
  { e1 = new ArrayLength(e1); }
|
  "." i=Identifier() "("
  { e3 = new ExpList(); }
  (
  e2=Expression() { e3.addElement(e2); }
  ( "," e2=Expression() { e3.addElement(e2); })*
  )? ")"
  { e1 = new Call(e1,i,e3); }
  )*
  { return e1; }
}

Exp PrimaryExpression() :
{ Exp e;
  Token t;
  Identifier i;
}
{ 
  (
  t=<INTEGER_LITERAL>
  { e = new IntegerLiteral(Integer.decode(t.image)); }
|
  "true"
  { e = new True(); }
|
  "false"
  { e = new False(); }
|
  t=<IDENTIFIER>
  { e = new IdentifierExp(t.image); }
|
  "this"
  { e = new This(); }
|
  LOOKAHEAD(3)
  "new" "int" "[" e=Expression() "]"
  { e = new NewArray(e); }
|
  "new" i=Identifier() "(" ")"
  { e = new NewObject(i); }
|   
  "(" e=Expression() ")"
  )
  { return e; }
}

Identifier Identifier() :
{ Token t; }
{
  t=<IDENTIFIER>
  { return new Identifier(t.image); }
}

